// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CategoryPickerModal /> snapshots should match snapshot on visible modal 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <Modal
    animationType="none"
    deviceHeight={null}
    deviceWidth={null}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={false}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    testID="CATEGORY_PICKER_MODAL_TEST_ID"
    transparent={true}
    visible={true}
  >
    <View
      accessible={true}
      focusable={true}
      forwardedRef={[Function]}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "height": 1334,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": 750,
        }
      }
      useNativeDriver={false}
    />
    <View
      deviceHeight={null}
      deviceWidth={null}
      forwardedRef={[Function]}
      hideModalContentWhileAnimating={false}
      onBackdropPress={[Function]}
      onModalHide={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      panResponderThreshold={4}
      pointerEvents="box-none"
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      statusBarTranslucent={false}
      style={
        Object {
          "flex": 1,
          "justifyContent": "center",
          "margin": 37.5,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeThreshold={100}
      useNativeDriver={false}
    >
      <View
        style={
          Array [
            Object {
              "backgroundColor": "#FFF",
              "borderRadius": 20,
              "display": "flex",
              "flexDirection": "column",
              "justifyContent": "center",
              "maxHeight": "80%",
              "paddingBottom": 20,
              "paddingLeft": 20,
              "paddingRight": 20,
              "paddingTop": 20,
            },
          ]
        }
      >
        <RCTScrollView
          collapsable={false}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
        >
          <View>
            <View
              accessible={true}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "#f2f5f7",
                    "borderRadius": 20,
                    "flexDirection": "row",
                    "flexGrow": 1,
                    "marginTop": 10,
                    "paddingBottom": 10,
                    "paddingLeft": 10,
                    "paddingRight": 10,
                    "paddingTop": 10,
                  },
                ]
              }
              testID="CATEGORY_ITEM"
            >
              <View
                color="#d3fae2"
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "backgroundColor": "#f1ffff",
                      "borderRadius": 25,
                      "height": 50,
                      "justifyContent": "center",
                      "marginRight": 20,
                      "width": 50,
                    },
                  ]
                }
              >
                <Text />
              </View>
              <Text
                style={
                  Array [
                    Object {
                      "color": "#5e5e5e",
                      "fontFamily": "Inter_500",
                      "fontSize": 16,
                    },
                    Object {
                      "fontFamily": "Inter_300",
                    },
                  ]
                }
              >
                CategoryOne
              </Text>
            </View>
            <View
              accessible={true}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "#f2f5f7",
                    "borderRadius": 20,
                    "flexDirection": "row",
                    "flexGrow": 1,
                    "marginTop": 10,
                    "paddingBottom": 10,
                    "paddingLeft": 10,
                    "paddingRight": 10,
                    "paddingTop": 10,
                  },
                ]
              }
              testID="CATEGORY_ITEM"
            >
              <View
                color="#d3fae2"
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "backgroundColor": "#f1ffff",
                      "borderRadius": 25,
                      "height": 50,
                      "justifyContent": "center",
                      "marginRight": 20,
                      "width": 50,
                    },
                  ]
                }
              >
                <Text />
              </View>
              <Text
                style={
                  Array [
                    Object {
                      "color": "#5e5e5e",
                      "fontFamily": "Inter_500",
                      "fontSize": 16,
                    },
                    Object {
                      "fontFamily": "Inter_300",
                    },
                  ]
                }
              >
                CategoryTwo
              </Text>
            </View>
            <View
              accessible={true}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "#f2f5f7",
                    "borderRadius": 20,
                    "flexDirection": "row",
                    "flexGrow": 1,
                    "marginTop": 10,
                    "paddingBottom": 10,
                    "paddingLeft": 10,
                    "paddingRight": 10,
                    "paddingTop": 10,
                  },
                ]
              }
              testID="CATEGORY_ITEM"
            >
              <View
                color="#d3fae2"
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "backgroundColor": "#f1ffff",
                      "borderRadius": 25,
                      "height": 50,
                      "justifyContent": "center",
                      "marginRight": 20,
                      "width": 50,
                    },
                  ]
                }
              >
                <Text />
              </View>
              <Text
                style={
                  Array [
                    Object {
                      "color": "#5e5e5e",
                      "fontFamily": "Inter_500",
                      "fontSize": 16,
                    },
                    Object {
                      "fontFamily": "Inter_300",
                    },
                  ]
                }
              >
                CategoryThree
              </Text>
            </View>
          </View>
        </RCTScrollView>
      </View>
    </View>
  </Modal>
</RNCSafeAreaProvider>
`;

exports[`<CategoryPickerModal /> snapshots should match snapshot with no visible modal 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <Modal
    animationType="none"
    deviceHeight={null}
    deviceWidth={null}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={false}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    testID="CATEGORY_PICKER_MODAL_TEST_ID"
    transparent={true}
    visible={false}
  >
    <View
      accessible={true}
      focusable={true}
      forwardedRef={[Function]}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "height": 1334,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": 750,
        }
      }
      useNativeDriver={false}
    />
    <View
      deviceHeight={null}
      deviceWidth={null}
      forwardedRef={[Function]}
      hideModalContentWhileAnimating={false}
      onBackdropPress={[Function]}
      onModalHide={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      panResponderThreshold={4}
      pointerEvents="box-none"
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      statusBarTranslucent={false}
      style={
        Object {
          "flex": 1,
          "justifyContent": "center",
          "margin": 37.5,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeThreshold={100}
      useNativeDriver={false}
    >
      <View
        style={
          Array [
            Object {
              "backgroundColor": "#FFF",
              "borderRadius": 20,
              "display": "flex",
              "flexDirection": "column",
              "justifyContent": "center",
              "maxHeight": "80%",
              "paddingBottom": 20,
              "paddingLeft": 20,
              "paddingRight": 20,
              "paddingTop": 20,
            },
          ]
        }
      >
        <RCTScrollView
          collapsable={false}
          onGestureHandlerEvent={[Function]}
          onGestureHandlerStateChange={[Function]}
        >
          <View />
        </RCTScrollView>
      </View>
    </View>
  </Modal>
</RNCSafeAreaProvider>
`;
